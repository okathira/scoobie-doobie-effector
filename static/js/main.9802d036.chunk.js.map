{"version":3,"sources":["ClippingBoxes.tsx","App.tsx","index.tsx"],"names":["ClippingBoxes","currentFrame","boxesProps","id","image","map","boxProps","crop","x","srcX","y","srcY","width","srcWidth","height","srcHeight","showX","showY","showWidth","showHeight","stroke","strokeWidth","draggable","key","videoConstraints","facingMode","layoutSize","createCanvas","size","canvas","document","createElement","App","useState","baseCanvas","setBaseCanvas","frameInterval","setFrameInterval","setBoxesProps","mouseDownPos","setMouseDownPos","cameraRef","useRef","inputAreaRef","useEffect","setInterval","ctx","getContext","drawImage","current","video","getImageData","l","data","length","i","grayscale","makeGrayscale","putImageData","refreshFrame","clearInterval","className","ref","audio","style","position","onMouseDown","e","evt","clientX","clientY","onClick","relativePos","node","transform","getAbsoluteTransform","copy","invert","pos","getStage","getPointerPosition","point","getRelativePointerPosition","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9802d036.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Layer, Image } from \"react-konva\";\r\n\r\nexport type BoxProps = {\r\n  key: number;\r\n  srcX: number;\r\n  srcY: number;\r\n  srcWidth: number;\r\n  srcHeight: number;\r\n  showX: number;\r\n  showY: number;\r\n  showWidth: number;\r\n  showHeight: number;\r\n};\r\n\r\nconst ClippingBoxes: React.FC<{\r\n  currentFrame: CanvasImageSource;\r\n  boxesProps: BoxProps[];\r\n}> = ({ currentFrame, boxesProps }) => {\r\n  return (\r\n    <Layer>\r\n      <Image id=\"baseCanvas\" image={currentFrame} />\r\n      {(() =>\r\n        boxesProps.map((boxProps) => (\r\n          <Image\r\n            key={boxProps.key}\r\n            image={currentFrame}\r\n            crop={{\r\n              x: boxProps.srcX,\r\n              y: boxProps.srcY,\r\n              width: boxProps.srcWidth,\r\n              height: boxProps.srcHeight,\r\n            }}\r\n            x={boxProps.showX}\r\n            y={boxProps.showY}\r\n            width={boxProps.showWidth}\r\n            height={boxProps.showHeight}\r\n            stroke={\"black\"}\r\n            strokeWidth={10}\r\n            draggable\r\n          />\r\n        )))()}\r\n    </Layer>\r\n  );\r\n};\r\n\r\nexport default ClippingBoxes;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { Stage } from \"react-konva\";\r\nimport ClippingBoxes, { BoxProps } from \"./ClippingBoxes\";\r\nimport { Vector2d } from \"konva/types/types\";\r\nimport Konva from \"konva\";\r\n\r\ntype RectSize = {\r\n  width: number;\r\n  height: number;\r\n};\r\n\r\nconst videoConstraints = {\r\n  width: 1280,\r\n  height: 720,\r\n  facingMode: \"user\",\r\n};\r\n\r\nconst layoutSize: RectSize = {\r\n  ...videoConstraints,\r\n};\r\n\r\nconst createCanvas = (size: RectSize) => {\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = size.width;\r\n  canvas.height = size.height;\r\n\r\n  return canvas;\r\n};\r\n\r\nconst makeGrayscale = (image: ImageData) => {\r\n  const l = image.data.length / 4;\r\n  for (let i = 0; i < l; i++) {\r\n    const grayscale =\r\n      image.data[i * 4 + 0] * 0.299 +\r\n      image.data[i * 4 + 1] * 0.587 +\r\n      image.data[i * 4 + 2] * 0.114;\r\n\r\n    image.data[i * 4 + 0] = grayscale;\r\n    image.data[i * 4 + 1] = grayscale;\r\n    image.data[i * 4 + 2] = grayscale;\r\n  }\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [baseCanvas, setBaseCanvas] = useState(createCanvas(layoutSize));\r\n  const [frameInterval, setFrameInterval] = useState<NodeJS.Timeout>();\r\n  const [boxesProps, setBoxesProps] = useState<BoxProps[]>([]);\r\n  const [mouseDownPos, setMouseDownPos] = useState<Vector2d>({ x: 0, y: 0 });\r\n\r\n  const cameraRef = useRef<Webcam>(null);\r\n  const inputAreaRef = useRef<Konva.Stage>(null);\r\n\r\n  const refreshFrame = () => {\r\n    const ctx = createCanvas(layoutSize).getContext(\"2d\")!;\r\n    ctx.drawImage(cameraRef.current!.video!, 0, 0);\r\n\r\n    const image = ctx.getImageData(0, 0, layoutSize.width, layoutSize.height);\r\n    makeGrayscale(image);\r\n    ctx.putImageData(image, 0, 0);\r\n\r\n    setBaseCanvas(ctx.canvas);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFrameInterval(setInterval(() => refreshFrame(), 1000 / 30));\r\n\r\n    return () => {\r\n      clearInterval(frameInterval!);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getRelativePointerPosition = () => {\r\n    const node = inputAreaRef.current!;\r\n    const transform = node.getAbsoluteTransform().copy();\r\n    transform.invert();\r\n    const pos = node.getStage().getPointerPosition()!;\r\n\r\n    return transform.point(pos);\r\n  };\r\n\r\n  return (\r\n    <section className=\"App\">\r\n      <Webcam\r\n        id=\"camera\"\r\n        ref={cameraRef}\r\n        audio={false}\r\n        videoConstraints={videoConstraints}\r\n        width={layoutSize.width}\r\n        height={layoutSize.height}\r\n        style={{ position: \"absolute\" }}\r\n      />\r\n      <Stage\r\n        className=\"inputArea\"\r\n        ref={inputAreaRef}\r\n        width={layoutSize.width}\r\n        height={layoutSize.height}\r\n        onMouseDown={(e) => {\r\n          setMouseDownPos({ x: e.evt.clientX, y: e.evt.clientY });\r\n        }}\r\n        onClick={(e) => {\r\n          const relativePos = getRelativePointerPosition();\r\n          setBoxesProps([\r\n            ...boxesProps,\r\n            {\r\n              key: boxesProps.length,\r\n              srcX: relativePos.x,\r\n              srcY: relativePos.y,\r\n              srcWidth: mouseDownPos.x - e.evt.clientX,\r\n              srcHeight: mouseDownPos.y - e.evt.clientY,\r\n              showX: relativePos.x,\r\n              showY: relativePos.y,\r\n              showWidth: mouseDownPos.x - e.evt.clientX,\r\n              showHeight: mouseDownPos.y - e.evt.clientY,\r\n            },\r\n          ]);\r\n        }}\r\n      ></Stage>\r\n      <Stage\r\n        className=\"outputArea\"\r\n        width={layoutSize.width}\r\n        height={layoutSize.height}\r\n      >\r\n        <ClippingBoxes currentFrame={baseCanvas} boxesProps={boxesProps} />\r\n      </Stage>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}