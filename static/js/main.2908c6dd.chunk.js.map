{"version":3,"sources":["contextData.ts","konvaFunctions.ts","InputArea.tsx","ClippingBox.tsx","Exhibition.tsx","Controller.tsx","OutputArea.tsx","canvasFunctions.ts","defaultConfig.ts","App.tsx","index.tsx"],"names":["boxContainersContext","createContext","Map","setBoxContainersContext","useBoxContainers","useContext","useSetBoxContainers","getRelativePointerPosition","ref","current","node","transform","getAbsoluteTransform","copy","invert","pos","getStage","getPointerPosition","point","SelectionRect","beginPos","endPos","x","y","width","height","fill","stroke","opacity","InputArea","layoutSize","setBoxContainers","useState","mouseDownPos","setMouseDownPos","dragging","setDragging","inputAreaRef","useRef","idNum","className","onMouseDown","onMouseUp","mouseUpPos","preState","Math","min","abs","newProps","cropX","cropY","cropWidth","cropHeight","scaleX","scaleY","newState","set","addBoxContainer","ClippingBoxes","currentFrame","boxProps","isSelected","onSelect","onChange","shapeRef","transformerRef","useEffect","nodes","getLayer","batchDraw","onClick","onDragEnd","e","target","onTransformEnd","offset","image","strokeWidth","strokeScaleEnabled","draggable","rotateEnabled","ignoreStroke","padding","Exhibition","selectedKeyState","selectedKey","setSelectedKey","boxContainers","undefined","Array","from","map","key","ClippingBox","Controller","setBoxContainer","affectSelectedBox","changeProps","console","error","preProps","get","flipHorizontally","flipVertically","disabled","delete","deleteSelectedBox","OutputArea","baseCanvas","Provider","value","createCanvas","size","canvas","document","createElement","videoConstraints","facingMode","cameraSize","App","setBaseCanvas","BoxContainers","cameraRef","frameInterval","setInterval","canvasSize","video","ctx","getContext","drawImage","getImageData","l","data","length","i","grayscale","s","makeGrayscale","putImageData","refreshFrame","clearInterval","id","audio","style","position","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2908c6dd.chunk.js","sourcesContent":["import { createContext, Dispatch, SetStateAction, useContext } from \"react\";\r\n\r\nexport const boxContainersContext = createContext<Map<number, BoxProps>>(\r\n  new Map()\r\n);\r\nexport const setBoxContainersContext = createContext<\r\n  Dispatch<SetStateAction<Map<number, BoxProps>>>\r\n>(() => {});\r\n\r\nexport const useBoxContainers = () => useContext(boxContainersContext);\r\nexport const useSetBoxContainers = () => useContext(setBoxContainersContext);\r\n","import Konva from \"konva\";\r\nimport { Vector2d } from \"konva/types/types\";\r\n\r\nconst getRelativePointerPosition = (\r\n  ref: React.RefObject<Konva.Stage>\r\n): Vector2d | null => {\r\n  if (!ref.current) return null;\r\n  const node = ref.current;\r\n  const transform = node.getAbsoluteTransform().copy();\r\n  transform.invert();\r\n  const pos = node.getStage().getPointerPosition();\r\n\r\n  return pos ? transform.point(pos) : null;\r\n};\r\n\r\nexport { getRelativePointerPosition };\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Layer, Stage, Rect } from \"react-konva\";\r\nimport { useSetBoxContainers } from \"./contextData\";\r\n\r\nimport Konva from \"konva\";\r\nimport { Vector2d } from \"konva/types/types\";\r\nimport { getRelativePointerPosition } from \"./konvaFunctions\";\r\n\r\nconst SelectionRect: React.FC<{\r\n  beginPos: Vector2d;\r\n  endPos: Vector2d;\r\n}> = ({ beginPos, endPos }) => {\r\n  return (\r\n    <Rect\r\n      x={beginPos.x}\r\n      y={beginPos.y}\r\n      width={endPos.x - beginPos.x}\r\n      height={endPos.y - beginPos.y}\r\n      fill={\"blue\"}\r\n      stroke={\"red\"}\r\n      opacity={0.2}\r\n    />\r\n  );\r\n};\r\n\r\nconst InputArea: React.FC<{\r\n  layoutSize: RectSize;\r\n}> = ({ layoutSize }) => {\r\n  const setBoxContainers = useSetBoxContainers();\r\n  const [mouseDownPos, setMouseDownPos] = useState<Vector2d>({ x: 0, y: 0 });\r\n  const [dragging, setDragging] = useState<Boolean>(false);\r\n\r\n  const inputAreaRef = useRef<Konva.Stage>(null);\r\n  const idNum = useRef<number>(0);\r\n\r\n  const addBoxContainer = () => {\r\n    const mouseUpPos = getRelativePointerPosition(inputAreaRef) ?? {\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n\r\n    setBoxContainers(\r\n      (preState): Map<number, BoxProps> => {\r\n        // 左上頂点で座標を管理\r\n        const x = Math.min(mouseDownPos.x, mouseUpPos.x);\r\n        const y = Math.min(mouseDownPos.y, mouseUpPos.y);\r\n        const width = Math.abs(mouseDownPos.x - mouseUpPos.x) + 1;\r\n        const height = Math.abs(mouseDownPos.y - mouseUpPos.y) + 1;\r\n        // 表示時は反転に備えて中心座標で管理\r\n        const newProps: BoxProps = {\r\n          cropX: x,\r\n          cropY: y,\r\n          cropWidth: width,\r\n          cropHeight: height,\r\n          x: x + width / 2,\r\n          y: y + height / 2,\r\n          width,\r\n          height,\r\n          scaleX: 1,\r\n          scaleY: 1,\r\n        };\r\n\r\n        const newState = new Map(preState);\r\n        newState.set(idNum.current, newProps);\r\n        idNum.current++;\r\n\r\n        return newState;\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Stage\r\n      className=\"input-area\"\r\n      width={layoutSize.width}\r\n      height={layoutSize.height}\r\n      ref={inputAreaRef}\r\n      onMouseDown={() => {\r\n        setMouseDownPos(\r\n          getRelativePointerPosition(inputAreaRef) ?? { x: 0, y: 0 }\r\n        );\r\n        setDragging(true);\r\n      }}\r\n      onMouseUp={() => {\r\n        setDragging(false);\r\n        addBoxContainer(); // stateを変更してからでないとidNumが2回動いてしまうためこの順番\r\n      }}\r\n    >\r\n      <Layer>\r\n        {dragging ? (\r\n          <SelectionRect\r\n            beginPos={mouseDownPos}\r\n            endPos={getRelativePointerPosition(inputAreaRef) ?? { x: 0, y: 0 }}\r\n            // FIXME: endPosの更新タイミングで描画されず、baseCanvasの更新により描画されている。\r\n          />\r\n        ) : null}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default InputArea;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { Image, Transformer } from \"react-konva\";\r\n\r\nimport Konva from \"konva\";\r\n\r\nconst ClippingBoxes: React.FC<{\r\n  currentFrame: CanvasImageSource;\r\n  boxProps: BoxProps;\r\n  isSelected: boolean;\r\n  onSelect: () => void;\r\n  onChange: (newProps: BoxProps) => void;\r\n}> = ({ currentFrame, boxProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = useRef<Konva.Image>(null);\r\n  const transformerRef = useRef<Konva.Transformer>(null);\r\n\r\n  useEffect(() => {\r\n    // trasformerは手動でアタッチしなければならない\r\n    if (isSelected) {\r\n      transformerRef.current?.nodes([shapeRef.current!]);\r\n      transformerRef.current?.getLayer()?.batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  return (\r\n    <>\r\n      <Image\r\n        ref={shapeRef}\r\n        onClick={onSelect}\r\n        onDragEnd={(e) => {\r\n          onChange({\r\n            ...boxProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={() => {\r\n          // transformerはnodeのscaleを変更し、widthとheightはそのまま。\r\n          // しかし、データの管理を容易にするため、変形終了時にスケールをリセットする。\r\n          const node = shapeRef.current!;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // FIXME: 変形後の一瞬だけ直前の座標で描画されてちらつく\r\n          onChange({\r\n            ...boxProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            scaleX,\r\n            scaleY,\r\n          });\r\n        }}\r\n        {...boxProps}\r\n        offset={{\r\n          x: shapeRef.current?.width()! / 2,\r\n          y: shapeRef.current?.height()! / 2,\r\n        }}\r\n        image={currentFrame}\r\n        stroke={\"black\"}\r\n        strokeWidth={10}\r\n        strokeScaleEnabled={false}\r\n        draggable\r\n      />\r\n      {isSelected && (\r\n        <Transformer\r\n          ref={transformerRef}\r\n          rotateEnabled={false}\r\n          ignoreStroke={true}\r\n          padding={5} // strokeWidth /2\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClippingBoxes;\r\n","import React from \"react\";\r\nimport { Layer, Image } from \"react-konva\";\r\nimport ClippingBox from \"./ClippingBox\";\r\nimport { useBoxContainers, useSetBoxContainers } from \"./contextData\";\r\n\r\nconst Exhibition: React.FC<{\r\n  currentFrame: CanvasImageSource;\r\n  selectedKeyState: [\r\n    number | undefined,\r\n    React.Dispatch<React.SetStateAction<number | undefined>>\r\n  ];\r\n}> = ({ currentFrame, selectedKeyState }) => {\r\n  const [selectedKey, setSelectedKey] = selectedKeyState;\r\n\r\n  const boxContainers = useBoxContainers();\r\n  const setBoxContainers = useSetBoxContainers();\r\n\r\n  const checkDeselect = () => {\r\n    // 背景をクリックしたとき選択を解除\r\n    setSelectedKey(undefined);\r\n  };\r\n\r\n  return (\r\n    <Layer>\r\n      <Image image={currentFrame} onMouseDown={checkDeselect} />\r\n      {(() =>\r\n        Array.from(boxContainers).map(([key, boxProps]) => (\r\n          <ClippingBox\r\n            key={key}\r\n            boxProps={boxProps}\r\n            currentFrame={currentFrame}\r\n            isSelected={key === selectedKey}\r\n            onSelect={() => {\r\n              setSelectedKey(key);\r\n            }}\r\n            onChange={(boxProps: BoxProps) => {\r\n              const newState = new Map(boxContainers);\r\n              newState.set(key, boxProps);\r\n              setBoxContainers(newState);\r\n            }}\r\n          />\r\n        )))()}\r\n    </Layer>\r\n  );\r\n};\r\n\r\nexport default Exhibition;\r\n","import React from \"react\";\r\nimport { useSetBoxContainers } from \"./contextData\";\r\n\r\nconst Controller: React.FC<{\r\n  selectedKeyState: [\r\n    number | undefined,\r\n    React.Dispatch<React.SetStateAction<number | undefined>>\r\n  ];\r\n}> = ({ selectedKeyState }) => {\r\n  const [selectedKey, setSelectedKey] = selectedKeyState;\r\n  const setBoxContainer = useSetBoxContainers();\r\n\r\n  const affectSelectedBox = (changeProps: (preProps: BoxProps) => BoxProps) => {\r\n    if (selectedKey === undefined) {\r\n      console.error(\"No Boxes Selected\");\r\n      return null;\r\n    }\r\n\r\n    setBoxContainer((preState) => {\r\n      const preProps = preState.get(selectedKey);\r\n      if (preProps === undefined) {\r\n        console.error(\"Not Found\");\r\n        return preState;\r\n      }\r\n\r\n      const newProps: BoxProps = changeProps(preProps);\r\n      const newState = new Map(preState);\r\n      return newState.set(selectedKey, newProps);\r\n    });\r\n  };\r\n\r\n  const flipHorizontally = (preProps: BoxProps) => ({\r\n    ...preProps,\r\n    scaleX: -preProps.scaleX,\r\n  });\r\n\r\n  const flipVertically = (preProps: BoxProps) => ({\r\n    ...preProps,\r\n    scaleY: -preProps.scaleY,\r\n  });\r\n\r\n  const deleteSelectedBox = () => {\r\n    if (selectedKey === undefined) {\r\n      console.error(\"No Boxes Selected\");\r\n      return null;\r\n    }\r\n    setBoxContainer((preState) => {\r\n      const newState = new Map(preState);\r\n      if (!newState.delete(selectedKey)) console.error(\"Not Found\");\r\n      return newState;\r\n    });\r\n    setSelectedKey(undefined);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          onClick={() => setSelectedKey(undefined)}\r\n          disabled={selectedKey === undefined}\r\n        >\r\n          選択解除\r\n        </button>\r\n        <button\r\n          onClick={() => deleteSelectedBox()}\r\n          disabled={selectedKey === undefined}\r\n        >\r\n          削除\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button\r\n          onClick={() => affectSelectedBox(flipHorizontally)}\r\n          disabled={selectedKey === undefined}\r\n        >\r\n          左右反転\r\n        </button>\r\n        <button\r\n          onClick={() => affectSelectedBox(flipVertically)}\r\n          disabled={selectedKey === undefined}\r\n        >\r\n          上下反転\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controller;\r\n","import React, { useState } from \"react\";\r\nimport { Stage } from \"react-konva\";\r\nimport Exhibition from \"./Exhibition\";\r\nimport Controller from \"./Controller\";\r\nimport {\r\n  useBoxContainers,\r\n  boxContainersContext,\r\n  useSetBoxContainers,\r\n  setBoxContainersContext,\r\n} from \"./contextData\";\r\n\r\nconst OutputArea: React.FC<{\r\n  layoutSize: RectSize;\r\n  baseCanvas: CanvasImageSource;\r\n}> = ({ layoutSize, baseCanvas }) => {\r\n  // Contextは<Stage>を通り抜けないためブリッジする必要がある\r\n  const boxContainers = useBoxContainers();\r\n  const setBoxContainers = useSetBoxContainers();\r\n\r\n  const selectedKeyState = useState<number>();\r\n\r\n  return (\r\n    <>\r\n      <Stage\r\n        className=\"output-area\"\r\n        width={layoutSize.width}\r\n        height={layoutSize.height}\r\n      >\r\n        <setBoxContainersContext.Provider value={setBoxContainers}>\r\n          <boxContainersContext.Provider value={boxContainers}>\r\n            <Exhibition\r\n              currentFrame={baseCanvas}\r\n              selectedKeyState={selectedKeyState}\r\n            />\r\n          </boxContainersContext.Provider>\r\n        </setBoxContainersContext.Provider>\r\n      </Stage>\r\n      <Controller selectedKeyState={selectedKeyState} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OutputArea;\r\n","export const createCanvas = (size: RectSize) => {\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = size.width;\r\n  canvas.height = size.height;\r\n\r\n  return canvas;\r\n};\r\n\r\n// グレイスケールならCSSでもできる。その場合はcanvasごとにフィルターがかかるため構造を変える必要がありそう。\r\nexport const makeGrayscale = (image: ImageData) => {\r\n  const l = image.data.length / 4; // RGBA\r\n  for (let i = 0; i < l; i++) {\r\n    const grayscale =\r\n      image.data[i * 4 + 0] * 0.299 +\r\n      image.data[i * 4 + 1] * 0.587 +\r\n      image.data[i * 4 + 2] * 0.114;\r\n\r\n    const s = (grayscale * grayscale) / 255 / 255;\r\n\r\n    image.data[i * 4 + 0] = (s + 0.008) * 255;\r\n    image.data[i * 4 + 1] = (s + 0.014) * 255 + 1.9;\r\n    image.data[i * 4 + 2] = (s + 0.004) * 255;\r\n  }\r\n};\r\n","import Webcam from \"react-webcam\";\r\n\r\nexport const videoConstraints: Webcam[\"props\"][\"videoConstraints\"] = {\r\n  width: 1280,\r\n  height: 720,\r\n  facingMode: \"user\",\r\n};\r\n\r\nexport const cameraSize = {\r\n  ...videoConstraints,\r\n} as RectSize;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport InputArea from \"./InputArea\";\r\nimport OutputArea from \"./OutputArea\";\r\nimport { setBoxContainersContext, boxContainersContext } from \"./contextData\";\r\n\r\nimport { createCanvas, makeGrayscale } from \"./canvasFunctions\";\r\nimport { cameraSize, videoConstraints } from \"./defaultConfig\";\r\n\r\nconst App: React.FC = () => {\r\n  const [baseCanvas, setBaseCanvas] = useState(createCanvas(cameraSize));\r\n  const [BoxContainers, setBoxContainers] = useState<Map<number, BoxProps>>(\r\n    new Map()\r\n  );\r\n\r\n  const cameraRef = useRef<Webcam>(null);\r\n  const frameInterval = useRef<NodeJS.Timeout>();\r\n\r\n  const FPS = 60;\r\n  useEffect(() => {\r\n    const refreshFrame = (canvasSize: RectSize) => {\r\n      if (!(cameraRef.current && cameraRef.current.video)) return;\r\n      const ctx = createCanvas(canvasSize).getContext(\"2d\");\r\n\r\n      if (!ctx) return;\r\n      ctx.drawImage(cameraRef.current.video, 0, 0);\r\n\r\n      const image = ctx.getImageData(0, 0, canvasSize.width, canvasSize.height);\r\n      makeGrayscale(image);\r\n      ctx.putImageData(image, 0, 0);\r\n\r\n      setBaseCanvas(ctx.canvas);\r\n    };\r\n\r\n    frameInterval.current = setInterval(\r\n      () => refreshFrame(cameraSize),\r\n      1000 / FPS\r\n    );\r\n\r\n    return () => {\r\n      clearInterval(frameInterval.current!);\r\n    };\r\n  }, [FPS]);\r\n\r\n  return (\r\n    <section id=\"app\">\r\n      <Webcam\r\n        id=\"camera\"\r\n        ref={cameraRef}\r\n        audio={false}\r\n        videoConstraints={videoConstraints}\r\n        width={cameraSize.width}\r\n        height={cameraSize.height}\r\n        style={{ position: \"absolute\" }}\r\n      />\r\n      <setBoxContainersContext.Provider value={setBoxContainers}>\r\n        <boxContainersContext.Provider value={BoxContainers}>\r\n          <InputArea layoutSize={cameraSize} />\r\n          <OutputArea layoutSize={cameraSize} baseCanvas={baseCanvas} />\r\n        </boxContainersContext.Provider>\r\n      </setBoxContainersContext.Provider>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}